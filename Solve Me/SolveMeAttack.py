from web3 import Web3
from web3.middleware import geth_poa_middleware
import requests

rpc_url = "https://blockchain-solveme-52f110225f9f037d-eth.2022.ductf.dev/"

contract_address = "0x6E4198C61C75D1B4D1cbcd00707aAC7d76867cF8"

# the abi info generated by deploying the contract on remix, after that copying the web3deply abi from there.
abi = '[{"inputs":[],"name":"isSolved","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"solveChallenge","outputs":[],"stateMutability":"nonpayable","type":"function"}]'



wallet_address = "0x18495Fc6CAfe4cBE6C0Df845f1131A7B82dFDb05"
wallet_privatekey = "0x3ff1a0b63fd4a96394e644bf788b6312502c25b10c47273d03e7732ebad42a0c"

# Connect to the blockchain network
web3 = Web3(Web3.HTTPProvider(rpc_url))
web3.middleware_onion.inject(geth_poa_middleware, layer=0)

contract = web3.eth.contract(address=contract_address,abi=abi)

# get the nonce
nonce = web3.eth.getTransactionCount(wallet_address)

#build the transaction

tx = {
    'nonce' : nonce,
    'gas' : 100000,
    'gasPrice' : web3.toWei('4','gwei'),
    'from': wallet_address
}

# call the solveChallenge() function
transaction = contract.functions.solveChallenge().buildTransaction(tx)
signed_tx = web3.eth.account.signTransaction(transaction, wallet_privatekey)
tx_hash = web3.eth.sendRawTransaction(signed_tx.rawTransaction)
transaction_hash = web3.toHex(tx_hash)
tx_receipt = web3.eth.waitForTransactionReceipt(tx_hash)
print(tx_receipt)

# check if the challenge solved
response = requests.get("https://blockchain-solveme-52f110225f9f037d.2022.ductf.dev/challenge/solve")
print(response.text)